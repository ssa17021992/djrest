"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

from .envs import env


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.DEBUG

ALLOWED_HOSTS = env.ALLOWED_HOSTS

# Sentry: Error tracking that helps developers monitor and fix crashes in real time.
# https://sentry.io/welcome/

USE_SENTRY = env.USE_SENTRY
RAVEN_CONFIG = env.RAVEN_CONFIG

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Vendors
    'django_cleanup',
    'rest_framework',
    'corsheaders',
    'channels',

    # Apps
    'accounts',
    'common',
]

if USE_SENTRY:
    INSTALLED_APPS.append('raven.contrib.django.raven_compat')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',

    # Vendors
    'corsheaders.middleware.CorsMiddleware',

    # Apps
    'common.middleware.TimeZoneMiddleware',
    'common.middleware.AdminLocaleMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = env.CORS_ORIGIN_ALLOW_ALL
CORS_ORIGIN_WHITELIST = env.CORS_ORIGIN_WHITELIST
CORS_ALLOW_METHODS = env.CORS_ALLOW_METHODS
CORS_ALLOW_HEADERS = env.CORS_ALLOW_HEADERS

# Django REST framework: Powerful and flexible toolkit for building Web APIs.
# http://www.django-rest-framework.org/#api-guide

REST_FRAMEWORK = {
    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',
    # 'DEFAULT_THROTTLE_CLASSES': (
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle',
    # ),
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '100/day',
    #     'user': '1000/day'
    # },
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'accounts.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'accounts.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.PageNumberPagination',
}

# Django channels framework: Project that takes Django and extends its abilities beyond HTTP - to handle WebSockets, chat protocols, IoT protocols, and more.
# https://channels.readthedocs.io/en/latest/

ASGI_APPLICATION = env.ASGI_APPLICATION
CHANNEL_LAYERS = env.CHANNEL_LAYERS

ROOT_URLCONF = env.ROOT_URLCONF

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = env.WSGI_APPLICATION

# Cache
# https://docs.djangoproject.com/en/2.0/ref/settings/#caches

CACHES = env.CACHES

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = env.DATABASES

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'accounts.hashers.PBKDF2PasswordHasher',

    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = env.LANGUAGE_CODE

TIME_ZONE = env.TIME_ZONE

USE_I18N = env.USE_I18N

USE_L10N = env.USE_L10N

USE_TZ = env.USE_TZ

LOCALE_PATHS = env.LOCALE_PATHS

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = env.STATIC_URL
STATIC_ROOT = env.STATIC_ROOT

STATICFILES_DIRS = env.STATICFILES_DIRS

MEDIA_URL = env.MEDIA_URL
MEDIA_ROOT = env.MEDIA_ROOT

EMAIL_HOST = env.EMAIL_HOST
EMAIL_PORT = env.EMAIL_PORT
EMAIL_USE_TLS = env.EMAIL_USE_TLS
EMAIL_HOST_USER = env.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = env.EMAIL_HOST_PASSWORD

DEFAULT_FROM_EMAIL = env.DEFAULT_FROM_EMAIL

AUTH_TOKEN_EXPIRE = env.AUTH_TOKEN_EXPIRE

SIGNUP_CODE_EXPIRE = env.SIGNUP_CODE_EXPIRE
SIGNUP_EMAIL_USE_LIMIT = env.SIGNUP_EMAIL_USE_LIMIT

PASSWD_RESET_TOKEN_EXPIRE = env.PASSWD_RESET_TOKEN_EXPIRE
PASSWD_RESET_URL = env.PASSWD_RESET_URL

# Firebase Cloud Messaging
# https://firebase.google.com/docs/cloud-messaging/

FCM_TOKEN = env.FCM_TOKEN
FCM_SENDER_ID = env.FCM_SENDER_ID
FCM_URL = env.FCM_URL
FCM_DEFAULT_ICON = env.FCM_DEFAULT_ICON

# Login with Facebook

FACEBOOK_API = env.FACEBOOK_API

# Celery: Distributed task queue. Celery is an asynchronous task queue/job queue based on distributed message passing.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html

CELERY_BROKER_URL = env.CELERY_BROKER_URL
CELERY_RESULT_BACKEND = env.CELERY_RESULT_BACKEND

CELERY_BEAT_SCHEDULE = env.CELERY_BEAT_SCHEDULE
CELERY_BEAT_SCHEDULER = env.CELERY_BEAT_SCHEDULER
CELERY_BEAT_SCHEDULE_FILENAME = env.CELERY_BEAT_SCHEDULE_FILENAME
